<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>厚今的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhj0125.github.io/"/>
  <updated>2020-01-15T20:32:52.651Z</updated>
  <id>https://zhj0125.github.io/</id>
  
  <author>
    <name>张厚今</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhj0125.github.io/2020/01/16/hello-world/"/>
    <id>https://zhj0125.github.io/2020/01/16/hello-world/</id>
    <published>2020-01-15T16:34:55.005Z</published>
    <updated>2020-01-15T20:32:52.651Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>微信小程序——图片识别</title>
    <link href="https://zhj0125.github.io/2020/01/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/"/>
    <id>https://zhj0125.github.io/2020/01/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/</id>
    <published>2020-01-03T05:55:11.000Z</published>
    <updated>2020-01-17T15:54:16.729Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我的微信小程序 期末大作业——<strong>基于百度大脑API的图片识别小程序</strong></p><p>具体实现了<strong>动物识别</strong>、<strong>植物识别</strong>、<strong>车辆识别</strong> 三个功能<br>实验源码已经放到了<a href="https://github.com/ZHJ0125/ImageMaster" target="_blank" rel="noopener">我的GitHub</a>，欢迎测试修改 (<a href="https://github.com/ZHJ0125/ImageMaster" target="_blank" rel="noopener">项目地址：https://github.com/ZHJ0125/ImageMaster</a>)<br>下面给大家分享该项目的实验报告😜</p></blockquote><a id="more"></a><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><h3 id="1-1-课程大作业目的与要求"><a href="#1-1-课程大作业目的与要求" class="headerlink" title="1.1 课程大作业目的与要求"></a>1.1 课程大作业目的与要求</h3><p>课程大作业的目的是：运用在本次课程中学到的知识来指导实践，了解程序设计其实现方法，学会解决实际问题。掌握微信小程序设计的具体步骤与基本方法，针对选定的程序做调研分析。通过课程大作业，提高实践动手技能，培养独立分析分析问题和解决问题的能力。<br>课程大作业的要求：本次课程大作业的选题比较灵活，可以是自主选题，也可以参考课本中的案例自行修改完善，题目要符合课程大作业的要求，并且具备一定的水平和深度。</p><h3 id="1-2-课程大作业简介"><a href="#1-2-课程大作业简介" class="headerlink" title="1.2 课程大作业简介"></a>1.2 课程大作业简介</h3><p>图像识别是指利用计算机对图像进行处理、分析和理解，以识别各种不同模式的目标和对像的技术。在众多的图像识别分支中，拍照识别是一个重要的应用。利用图像识别技术，识别拍摄到的图片内容，已经广泛应用于各类图像识别App中。<br>微信小程序是一种不需要下载安装即可使用的应用，它实现了应用的“触手可及”和“即用即走”，用户扫一扫或搜一下即可打开应用。利用微信小程序使用便捷的特点，结合图片识别应用，本次大作业选定了制作微信小程序的<strong>图片识别应用——ImageMaster</strong>。本应用实现了基于微信小程序的动植物识别和车辆识别，使用便捷，充分发挥了微信小程序“即用即走”的特点。<br>同时，本次大作业项目制作过程只用了<strong>Git进行进度跟踪</strong>，便于进行版本回退和功能更新。</p><h2 id="2-设计思路"><a href="#2-设计思路" class="headerlink" title="2 设计思路"></a>2 设计思路</h2><p>根据初步选定的设计题目，查找相关资料，针对系统所涉及内容，查阅相关背景知识，将设计思路在此做一个概括。<br>本课题需要<strong>实现一个基本的图片识别应用，实现动物识别、植物识别和车辆识别三种主要功能</strong>。查阅的资料主要包括两方面：图片识别API的选择以及微信小程序UI框架的选择。</p><h3 id="2-1-图片识别API"><a href="#2-1-图片识别API" class="headerlink" title="2.1 图片识别API"></a>2.1 图片识别API</h3><p>首先需要查阅图片识别API的相关资料，以便确定课题最终使用哪个API。下面我将在接口能力、是否有参考例程、个人评价三方面简要分析一下常见的几种图片识别API。</p><blockquote><p>百度大脑</p></blockquote><ul><li>接口能力</li></ul><p>表2-1 百度图片识别API接口能力</p><table><thead><tr><th align="center">接口名称</th><th align="center">接口能力简要描述</th></tr></thead><tbody><tr><td align="center">图像主体检测</td><td align="center">识别图像中的主体具体坐标位置。</td></tr><tr><td align="center">通用物体和场景识别高级版</td><td align="center">识别图片中的场景及物体标签，支持10w+标签类型。</td></tr><tr><td align="center">菜品识别</td><td align="center">检测用户上传的菜品图片，返回具体的菜名、卡路里、置信度信息。</td></tr><tr><td align="center">自定义菜品识别</td><td align="center">入库自定义的单菜品图，实现上传多菜品图的精准识别，返回具体的菜名、位置、置信度</td></tr><tr><td align="center">logo商标识别</td><td align="center">识别图片中包含的商品LOGO信息，返回LOGO品牌名称、在图片中的位置、置信度。</td></tr><tr><td align="center">动物识别</td><td align="center">检测用户上传的动物图片，返回动物名称、置信度信息。</td></tr><tr><td align="center">植物识别</td><td align="center">检测用户上传的植物图片，返回植物名称、置信度信息。</td></tr><tr><td align="center">果蔬食材识别</td><td align="center">检测用户上传的果蔬类图片，返回果蔬名称、置信度信息。</td></tr><tr><td align="center">地标识别</td><td align="center">检测用户上传的地标图片，返回地标名称。</td></tr><tr><td align="center">红酒识别</td><td align="center">识别图像中的红酒标签，返回红酒名称、国家、产区、酒庄、类型、糖分、葡萄品种等信息。</td></tr><tr><td align="center">货币识别</td><td align="center">识别图像中的货币类型，返回货币名称、代码、面值、年份信息，可识别百余种国内外常见货币。</td></tr></tbody></table><ul><li>调用方式<br>API 和 SDK 两种方式，SDK文档包含 Java、PHP、Python、C#、C++、Node语言，有丰富的 Demo。</li></ul><blockquote><p>腾讯AI开放平台</p></blockquote><p>接口包含OCR、人体与人脸识别、物体识别、图片特效、图片识别、敏感信息审核、闲聊机器人、基础文本分析、语义解析、语音识别 等等，有 PHP 参考例程。</p><blockquote><p>华为HiAI</p></blockquote><p>接口包含人脸识别、人体识别、图片识别、图像分辨率、场景识别、文档检测矫正、人像分割、视频语音等等。有详细的开发指南，但是其针对的是 Android 手机平台的开发。</p><blockquote><p>旷世 Face++</p></blockquote><p>接口包含人脸识别、人体识别、证件识别、图像识别，拥有详细的开发指南。<br>综合比较之后，决定采用百度大脑 API平台。</p><h3 id="2-2-微信小程序UI框架"><a href="#2-2-微信小程序UI框架" class="headerlink" title="2.2 微信小程序UI框架"></a>2.2 微信小程序UI框架</h3><p>查阅各种微信小程序UI框架资料，决定使用哪种 UI 框架作为本项目的UI框架。</p><ul><li><p>WeUI</p><ul><li><a href="https://github.com/Tencent/weui-wxss" target="_blank" rel="noopener">项目地址</a></li><li>简介<br>WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。包含button、cell、dialog、 progress、 toast、article、actionsheet、icon等各式元素。</li><li>使用体验<br>毕竟是微信官方提供的UI框架，界面肯定是与微信小程序的适配度最好。但是感觉没有特别的亮点。</li></ul></li><li><p>Vant Weapp</p><ul><li><a href="https://github.com/youzan/vant-weapp" target="_blank" rel="noopener">项目地址</a></li><li>简介<br>Vant Weapp 是有赞移动端组件库 Vant 的小程序版本，两者基于相同的视觉规范，提供一致的 API 接口，助力开发者快速搭建小程序应用。</li><li>使用体验<br>组件分类做得不错，样式也很简洁美观。</li></ul></li><li><p>iView Weapp</p><ul><li><a href="https://github.com/TalkingData/iview-weapp" target="_blank" rel="noopener">项目地址</a></li><li>简介<br>一套高质量的微信小程序 UI 组件库</li><li>使用体验<br>界面简单，没亮点。</li></ul></li><li><p>MinUI</p><ul><li><a href="https://github.com/meili/minui" target="_blank" rel="noopener">项目地址</a></li><li>简介<br>MinUI 是基于微信小程序自定义组件特性开发而成的一套简洁、易用、高效的组件库，适用场景广。覆盖小程序原生框架，各种小程序组件主流框架等，并且提供了专门的命令行工具</li><li>使用体验<br>组件还算齐全，没有亮点。官方Demo还有广告链接。</li></ul></li><li><p>Wux Weapp</p><ul><li><a href="https://github.com/wux-weapp/wux-weapp" target="_blank" rel="noopener">项目地址</a></li><li>简介<br>Wux Weapp 是一套组件化、可复用、易扩展的微信小程序 UI 组件库。UI 样式可配置，拓展灵活，轻松适应不同的设计风格。60多个丰富的组件，能够满足移动端开发的基本需求。</li><li>使用体验<br>没有特别炫酷的效果，但组件齐全。</li></ul></li><li><p>ColorUI</p><ul><li><a href="https://github.com/weilanwl/ColorUI" target="_blank" rel="noopener">项目地址</a></li><li>简介<br>鲜亮的高饱和色彩，专注视觉的小程序组件库。</li><li>使用体验<br>功能齐全，各种组件分类明确。</li></ul></li><li><p>Taro UI</p><ul><li><a href="https://github.com/NervJS/taro-ui" target="_blank" rel="noopener">项目地址</a></li><li>简介<br>一款基于 Taro 框架开发的多端 UI 组件库。基于 Taro 开发 UI 组件一套组件，可以在微信小程序，支付宝小程序，百度小程序，H5 多端适配运行（ReactNative 端暂不支持）。提供友好的 API，可灵活的使用组件。</li><li>使用体验<br>界面简介，功能丰富。</li></ul></li></ul><blockquote><p>经过亲自体验各种UI框架的官方Demo，最后感觉 Taro UI 使我印象很深刻。界面简洁，组件分类明确。我起初决定使用 Taro UI 框架，但是在项目进行到UI设计阶段，发现Taro使用有些许难度，为简化开发过程，最终使用了微信小程序的官方UI框架——WeUI框架。</p></blockquote><h2 id="3-设计方案"><a href="#3-设计方案" class="headerlink" title="3 设计方案"></a>3 设计方案</h2><p>在需求分析的基础上，查阅资料，对在小程序设计中可能用到的相关技术做一定的调研分析，做一个概要性的描述。<br>因为微信小程序本身就是联网的应用平台，因此在微信小程序平台进行图片识别，就不必担心网络连接问题。从源头上追溯，实现图片识别需要用户首先上传图片或拍摄图片，需要解决<strong>图片上传问题</strong>；之后发送API请求时，图片需要作为请求的参数，需要解决<strong>图片转码的问题</strong>；最后API请求调用成功后，需要将识别的数据输出，就涉及<strong>数据处理</strong>以及<strong>UI界面设计的问题</strong>。通过解决关键的“图片上传”、“图片转码”、“API调用”、“界面设计”这几个问题，就可以实现基本的图片识别小程序了。</p><h2 id="4-设计过程"><a href="#4-设计过程" class="headerlink" title="4 设计过程"></a>4 设计过程</h2><p>根据初步选定的课程大作业程序设计题目，查找相关资料，结合课本中的案例以及前期的学习，整理设计过程。</p><p><img src="https://img-blog.csdnimg.cn/20200103124808936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=500x400" alt="在这里插入图片描述"></p><p>图1 设计过程</p><h3 id="4-1-百度开放平台注册"><a href="#4-1-百度开放平台注册" class="headerlink" title="4.1 百度开放平台注册"></a>4.1 百度开放平台注册</h3><p><img src="https://img-blog.csdnimg.cn/20200103125159157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=500x450" alt="在这里插入图片描述"></p><p>图4.1 服务条款</p><p>首先登陆百度智能云平台，同意它的服务条款。</p><p>之后填写相关的信息，在控制台概览中创建应用。</p><p><img src="https://img-blog.csdnimg.cn/20200103125254171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.2 创建新应用</p><p><img src="https://img-blog.csdnimg.cn/20200103125317479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>图4.3 获取密钥</p><p>现在已经申请好了百度的API接口，下面尝试在微信小程序中进行调用。</p><h3 id="4-2-获取asscee-token"><a href="#4-2-获取asscee-token" class="headerlink" title="4.2 获取asscee_token"></a>4.2 获取asscee_token</h3><p>在百度AI的官方文档中可以看到，这个API接口有两种调用方式，两种不同的调用方式有相同的接口URL地址，区别在于请求方式和鉴权方式不同。下面我将尝试使用微信小程序中常用的POST请求方式，调用该接口。</p><p><img src="https://img-blog.csdnimg.cn/20200103125333573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.4 调用方式</p><p>在官方文档中可以看到，使用post请求需要用到access_token，所以现在去查看如何获取access_token。</p><p><img src="https://img-blog.csdnimg.cn/20200103125352874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.5获取Access_Token</p><p>获取access_token需要下个授权的服务器地址发送post请求，使用固定的参数，即可得到服务器返回的json数据。</p><p><img src="https://img-blog.csdnimg.cn/20200103125404948.png#pic_center" alt="在这里插入图片描述"></p><p>图4.6 服务器返回参数</p><p>下面就开始进行小程序的编写，实现access_token的获取。<br>首先，在空的小程序中添加一个按钮，在按钮按下后，调用wx.request方法向服务器发送POST请求。</p><p><img src="https://img-blog.csdnimg.cn/20200103125421877.png#pic_center" alt="在这里插入图片描述"></p><p>图4.7 布局文件</p><p>按钮绑定事件处理函数，这个事件处理函数就是用来发送POST请求的。</p><p><img src="https://img-blog.csdnimg.cn/20200103125438131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.8 绑定事件</p><p>上面图片就是编写的事件处理函数，利用wx.request方法，请求百度API的URL地址，请求方式按要求是POST方式。然后分别编写了请求完成、请求成功、请求失败的回调函数，目的就是让我能在控制台中看到请求的状态。<br>下面就需要在微信小程序的后台添加合法域名，以便wx.request方法能够正确使用。</p><p><img src="https://img-blog.csdnimg.cn/2020010312545513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.9 添加域名</p><p>箭头所指的就是百度大脑的请求网址，上面那个URL是以前做地图API添加的，这里没有用到。运行模拟器之后成功获取到了access_token的值。</p><p><img src="https://img-blog.csdnimg.cn/20200103125511352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.10 获取token</p><p>可以看到，控制台执行了success回调函数，成功返回了access_token。现在Access_token的问题已经解决了。接下来就要尝试去请求百度图片识别的API接口了。<br>通过阅读百度大脑API接口文档，我大概理解了百度API的接口使用方式。看一下下面的API文档的截图就可以了解其流程。</p><p><img src="https://img-blog.csdnimg.cn/20200103125535165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.11 请求说明</p><p>我们首先需要使用微信封装的request方法请求这个API的URL地址，注意要使用该POST方式。然后这个URL的具体内容就是文档中给出的地址，不同的API接口有不同的请求地址。URL地址需要添加一些参数，如access_token、Content-Type等等。同时，还需要一个image参数作为图片的标识，这个image是将图片转换成了base64编码的格式，也就是将图片传换成了一串字符。<br>再查阅微信小程序wx.request方法就可以知道，image这个参数可以通过小程序的data属性表示。这样，API接口的请求过程就可以在小程序中表示出来了。</p><p><img src="https://img-blog.csdnimg.cn/20200103125601775.png" alt="在这里插入图片描述"></p><p>图4.12 参数说明</p><p>下面尝试在小程序中进行程序编写。<br>首先添加一个变量“token”用来存储我获取到的access_token值，然后将success回调函数修改成下图中的代码。</p><p><img src="https://img-blog.csdnimg.cn/2020010312563252.png#pic_center" alt="在这里插入图片描述"></p><p>图4.13 调用方式</p><p>也就是将token从服务器返回的json数据中提取出来。现在，token已经存储到了变量中。</p><h3 id="4-3-图片上传"><a href="#4-3-图片上传" class="headerlink" title="4.3 图片上传"></a>4.3 图片上传</h3><p>现在有一个问题，<strong>微信小程序怎样获取图片数据呢</strong>？微信常用的方式是将用户的图片文件上传到微信开发者的服务器上，服务器接收到图片数据后再进行相关的处理。不管怎样，都首先需要使用微信提供的接口上传图片文件。那么首先研究一下怎样使用微信的图片上传接口。<br>微信提供了“从本地选择图片或使用相机拍照”的接口“wx.chooseImage”。</p><p><img src="https://img-blog.csdnimg.cn/20200103125653556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.14 参数说明</p><p>现在尝试使用该接口上传一下图片文件。在逻辑文件中编写图片上传按钮的事件处理函数。</p><p><img src="https://img-blog.csdnimg.cn/20200103125710804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.15 获取图片</p><p>下面运行小程序，点击上传图片按钮，会弹出系统资源管理器，在里面选择图片文件点击确定，即可成功上传图片文件。在success回调函数中，把上传图片的文件路径放到变量中，再通过控制台显示出来即可。在控制台中显示了图片路径。</p><p><img src="https://img-blog.csdnimg.cn/20200103125733172.png#pic_center" alt="在这里插入图片描述"></p><p>图4.16 控制台信息</p><p>为了确定图片真的已经上传到了微信小程序中，我现在把上传的图片显示在小程序界面中。小程序文档中指出，tempFilePaths可以作为<image>组件的src地址，所以显示图片就很方便了。<br>经过一番调试，该功能终于实现了。首先，在页面布局中添加<image>组件，该组件的src设置为动态变量imageUrl，以便在图片上传后动态改变。之后编写相应的事件处理函数，首先添加一个默认的图片索引地址，将该图片放到向程序工程目录下，使用data属性保存其路径信息。</p><p><img src="https://img-blog.csdnimg.cn/20200103125806408.png#pic_center" alt="在这里插入图片描述"></p><p>图4.17 图片地址</p><p>然后在原有的图片上传事件处理函数的基础上，编写增加代码如下：</p><p><img src="https://img-blog.csdnimg.cn/20200103125830843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.18 获取图片地址</p><p>画横线的代码是图片动态显示的关键代码。这样，就是实现了图片的上传和动态更新。PS：这部分内容参考课本P132“上传头像”部分。</p><h3 id="4-4-图片格式转化"><a href="#4-4-图片格式转化" class="headerlink" title="4.4 图片格式转化"></a>4.4 图片格式转化</h3><p>好的，现在就可以看一下怎样把图片转换成base64格式的数据了。<br>经过查找资料，发现将图片转换成base64格式的方式也有不少。我是用一种微信提供的文件管理接口实现的。在上传图片的成功回调函数中（此时已经得到了本地图片地址），使用文件系统管理方法，读取本地文件的内容。这里指定读取文件的编码格式为base64，然后通过控制台显示出来就可以了。</p><p><img src="https://img-blog.csdnimg.cn/20200103125851993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.19 图片转码</p><p>上面截了一下关键位置的代码，这部分代码是放在success回调函数中，因为回调函数中已经获取到了上传图片的本地地址。<br>看一下控制台的信息：</p><p><img src="https://img-blog.csdnimg.cn/20200103125913402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.20 控制台信息</p><p>可以看到，控制台输出了图片的base64编码值。稍微了解一下base64编码，该编码可以用于HTML环境下的较长信息的标识，只要用于canvas画布的图片显示。它的好处在于，可以在没有上传图片文件的情况下，使用该编码在HTML中插入该图片。这种编码有固定的表示形式：“data:image/jpeg;base64, …..”，也有固定的格式转换格式。具体的内容就不再详细研究了。在我的测试中，上传的原图片大小是20.5KB，转换成base64编码之后的数据大小为54.7KB。</p><h3 id="4-5-API请求"><a href="#4-5-API请求" class="headerlink" title="4.5 API请求"></a>4.5 API请求</h3><p>图片已经准备好了，现在已经可以去调用百度图片识别的API了。下面需要对包括“access_token”、“base64编码”等数据进行整合，并以动物识别为例尝试该API的调用。<br>首先添加识别按钮，然后编写相应的事件处理函数。</p><p><img src="https://img-blog.csdnimg.cn/20200103125930715.png#pic_center" alt="在这里插入图片描述"></p><p>图4.21 识别按钮</p><p>事件处理函数就是要进行API接口调用了。</p><p><img src="https://img-blog.csdnimg.cn/20200103125947987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.22 识别图片</p><p>上面就是按照百度动物识别API文档的要求，结合小程序wx.request方法的属性写出来的事件处理函数。<br>我在网上搜了一个狗的图片，添加到了小程序文件夹中作为测试图片。运行模拟器进行测试。依次点击“获取access_token”、“上传图片”以及“识别该图片”按钮，在控制台看到API返回的数据。</p><p><img src="https://img-blog.csdnimg.cn/2020010313001545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.23 接口返回值</p><p>可以看到，在API返回的JSON数据中，标注了识别结果，其中置信度最高的结果是“威尔士柯基”。我特意搜了一下这个“威尔士柯基”，识别结果还是挺准的。<br>还要测试一下非动物图片的识别情况。现在我继续上传一个头像图片进行测试，看看测试结果。可以看到，非动物也是可以被识别出来的，识别结果只有一个高置信度的“非动物”结果。</p><p><img src="https://img-blog.csdnimg.cn/20200103130026994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.24 非动物识别</p><p>程序做到这里，可以说最大的障碍已经被克服了。目前已经实现了“动物识别”，下面就是逐步实现“植物识别”、“车型识别”等功能就可以了，他们的基本流程是一样的。</p><h3 id="4-6-实现植物识别"><a href="#4-6-实现植物识别" class="headerlink" title="4.6 实现植物识别"></a>4.6 实现植物识别</h3><p>现在来整理一下代码，尝试实现“植物识别”功能。<br>通过阅读API文档可以看出，其实这几种不同的图像识别的接口，只是URL地址不同，其他参数都是一样的。所以我设置了一个变量apiUrl用来存放不同接口的URL地址，为“植物识别”编写一个新的事件处理函数。这个事件处理函数与“动物识别”唯一的不同就是apiUrl不一样罢了。</p><p><img src="https://img-blog.csdnimg.cn/20200103130040233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.25 植物识别</p><p>可以看到，我把请求接口的URL放到了apiUrl变量中。同时精简了控制台显示的数据，只保留关键的数据。<br>至于图像识别的事件处理函数，只需要把之前的POST请求地址改成用apiUrl表示就可以了。</p><p><img src="https://img-blog.csdnimg.cn/20200103130059359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.26 识别图片</p><p>可以看到画横线的那句话，就是把POST地址改了一下，使程序的使用范围更广了。同时还要注意到，我精简了控制台的输出信息，只保留置信度最高的结果。<br>现在就可以识别植物了。</p><p><img src="https://img-blog.csdnimg.cn/2020010313011067.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.27 识别植物</p><p>现在控制台简洁多了，而且也能正确显示置信度最高的识别结果了。</p><h3 id="4-7-实现车辆识别"><a href="#4-7-实现车辆识别" class="headerlink" title="4.7 实现车辆识别"></a>4.7 实现车辆识别</h3><p>现在继续做车型识别。现在添加功能就比较简单了，只需修改apiUrl。<br>这时遇到了一个问题，上传图片的大小错误。</p><p><img src="https://img-blog.csdnimg.cn/20200103130123464.png#pic_center" alt="在这里插入图片描述"></p><p>图4.28 控制台信息</p><p>为了方便调试，我将控制台信息输出添加了条件判断语句，如果发生错误就输出错误信息，没有错误就输出识别结果。首先测试了图片大小错误的情况，然后测试了正常的图片，控制台输出的信息如下：</p><p><img src="https://img-blog.csdnimg.cn/20200103130149498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.29 控制台信息</p><p>这样调试就方便多了。现在来解决图片size的问题。以“车型识别”为例，其图片要求如下：</p><p><img src="https://img-blog.csdnimg.cn/20200103130158445.png#pic_center" alt="在这里插入图片描述"></p><p>图4.30 图片要求</p><p>我刚才上传的“image size error”的图片，其像素为1920px*1080px，符合文档中图片长宽的要求。原图大小为460KB，其编码为base64之后的大小为1.2MB，同样符合要求。这就奇怪了，因为这些参数都是符合文档要求的。<br>之后我又进行了其他测试，换了一张1920px × 1080px的图片，不会报错。所以看起来图片不合适的原因应该是图片大小的问题。然而，当我继续测试使用2048px × 1335px，原图大小为1.5MB的图片时，竟然可以正常识别。所以这张图片报错的原因暂时没有搞清楚。<br>先不管这里了，因为我测试了其他图片，都没有出现问题，只有这一张出现图片大小的问题。就先放一下吧。下面整理一下小程序，优化一下界面。</p><p><img src="https://img-blog.csdnimg.cn/20200103130218887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.31 界面展示</p><p>上图是初始化界面，调整了“识别图片”按钮和图片之间的相对位置，同时添加了文本框显示提示信息。下面以“动物识别”为例，展示识别效果。可以看到，通过添加文本框，可以直观地显示识别结果，非常方便。</p><p><img src="https://img-blog.csdnimg.cn/20200103130224533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.32 识别结果</p><p>下面就来编写一下样式文件吧。</p><h3 id="4-8-Taro样式测试"><a href="#4-8-Taro样式测试" class="headerlink" title="4.8 Taro样式测试"></a>4.8 Taro样式测试</h3><ul><li>（1）Taro样式介绍</li></ul><p>样式文件我想尝试使用UI框架编写，经过对比多种UI框架，最终决定使用Taro UI作为我的UI框架使用。以下是Taro官网介绍：<br>Taro 是由京东凹凸实验室打造的多端开发解决方案。现如今市面上端的形态多种多样，Web、ReactNative、微信小程序等各种端大行其道，当业务要求同时在不同的端都要求有所表现的时候，针对不同的端去编写多套代码的成本显然非常高，这时候只编写一套代码就能够适配到多端的能力就显得极为需要。使用 Taro，我们可以只书写一套代码，再通过 Taro 的编译工具，将源代码分别编译出可以在不同端（微信小程序、H5、RN等）运行的代码。<br>下面就按照官网的教程，尝试在本地小程序中使用该框架进行练习。为了防止原有的小程序结构被破坏，首先新建一个小程序作为练习使用。<br>Taro需要使用Node.js，要求版本在v8.x 或以上。但我之前安装的版本是v4.4.3，所以现在先重新安装新版本的Node.js。</p><p><img src="https://img-blog.csdnimg.cn/2020010313025249.png#pic_center" alt="在这里插入图片描述"></p><p>图4.33 版本查看</p><p><img src="https://img-blog.csdnimg.cn/2020010313030748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.34 安装新版本NodeJs</p><p>经过重新安装，现在已经升级到了最新的长期支持版本V12.13.1。</p><p><img src="https://img-blog.csdnimg.cn/20200103130316921.png#pic_center" alt="在这里插入图片描述"></p><p>图4.35 检查新版本</p><p>下面开始项目初始化安装。</p><ul><li>（2）使用前的准备</li></ul><p>首先安装Taro脚手架工具，这里需要使用npm包管理工具进行安装。</p><p><img src="https://img-blog.csdnimg.cn/20200103130329823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.36 安装脚手架</p><p>之后需要使用Yarn依赖管理工具安装相应的依赖，先来安装Yarn。对于Windows系统，可以下载官方提供的安装器进行安装。安装Taro完成后，可以使用命令安装相应的依赖。</p><p><img src="https://img-blog.csdnimg.cn/20200103130346270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.37 安装依赖</p><ul><li>（3） 安装项目模板<br>现在到小程序工程目录下，进行Taro模板的创建。这里注意,需要提前安装python2版本。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200103131026864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.38 安装模板</p><p>现在模板安装完成了，可以进行模块引入了。</p><ul><li>（4） 引入Taro模块</li></ul><p>下面进行taro模块的导入，需要使用npm本地编译taro模块。</p><p><img src="https://img-blog.csdnimg.cn/20200103131036376.png#pic_center" alt="在这里插入图片描述"></p><p>图4.39 编译模块</p><p>编译完成后，我发现taro工程的目录结构与微信小程序的工程结构不一样。而且taro的样式文件编写的格式也不是wxss格式，这就导致我还要学习一些其他的样式格式规则才能上手编写taro。为了尽快完成小程序，我转向了使用WeUI框架。</p><h3 id="4-9-WeUI样式测试"><a href="#4-9-WeUI样式测试" class="headerlink" title="4.9 WeUI样式测试"></a>4.9 WeUI样式测试</h3><ul><li>（1） WeUI介绍</li></ul><p>WeUI 是一套与微信原生 UI 一致的 UI 库，核心文件是 weui.css，只需要获取到该文件，然后在页面中引入，即可使用 WeUI 的组件。首先到其GitHub网站下载源代码，新建一个工程文件用来进行测试和修改。在微信开发者工具中打开该工程。</p><p><img src="https://img-blog.csdnimg.cn/20200103131103801.png#pic_center" alt="在这里插入图片描述"></p><p>图4.40 工程目录</p><p>此时模拟器中就可以查看到WeUI框架的各种组件样式。</p><p><img src="https://img-blog.csdnimg.cn/20200103131115472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.41 样式展示</p><ul><li>（2） 样例编写</li></ul><p>下面来研究一下WeUI是怎样组织样式编写的。<br>以Grid样式为例，先看一下他的效果。</p><p><img src="https://img-blog.csdnimg.cn/20200103131129586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.42 gird样式效果</p><p>再看一下它的布局文件。</p><p><img src="https://img-blog.csdnimg.cn/20200103131139929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.43 布局文件</p><p>可以看到，他是直接使用了WeUI提供的class，利用wx:for循环实现Grid组件的控制。而逻辑文件中给出了grids变量数组的数据，从0到8表示循环9次，显示9个Grid宫格。</p><p><img src="https://img-blog.csdnimg.cn/20200103131150146.png#pic_center" alt="在这里插入图片描述"></p><p>图4.44 Grid逻辑文件</p><p>现在尝试将该样式移植到我的小程序中。移植样式最关键的就是它的weui.wxss，按照教程，可以使用外联样式引入的方式将改样式文件引入到项目中。<br>首先将style文件夹整体复制到我的工程目录中，然后在全局样式中导入weui的样式文件。</p><p><img src="https://img-blog.csdnimg.cn/20200103131159582.png#pic_center" alt="在这里插入图片描述"></p><p>图4.45 导入样式</p><p>之后创建一个新的页面用来测试样式内容，并将其页面作为默认显示的页面。</p><p><img src="https://img-blog.csdnimg.cn/20200103131213306.png#pic_center" alt="在这里插入图片描述"></p><p>图4.46 创建新页面</p><p>之后就可以分别在新创建的页面中编写grid布局和逻辑文件，内容与示例代码一样。这样效果就与示例代码相似了。<br>官方例程中Grid的九个组件，是由<code>&lt;navigator&gt;</code>组件组成的。<code>&lt;navigator&gt;</code>组件用于实现页面之间的跳转，而我想要通过button组件实现用户选择不同类型图片的功能，所以需要使用button组件。下面再测试一下button组件的使用。<br>首先是从官方历程中抽取出我们需要的组件。</p><p><img src="https://img-blog.csdnimg.cn/20200103131223421.png#pic_center" alt="在这里插入图片描述"></p><p>图4.47 组件布局</p><p>现在就需要移植一下样式文件了。在例程样式文件中找到”weui-btn”、”class”、”page__bd”、”page__bd__spacing”的文件内容，复制到本页面的样式文件中即可。最后实现的效果如下图所示。</p><p><img src="https://img-blog.csdnimg.cn/20200103131239460.png#pic_center" alt="在这里插入图片描述"></p><p>图4.48 button效果</p><p>下面尝试将原先的逻辑功能与样式结合起来。首先将样式文件复制到index.wxss文件中，然后将原先的button组件的样式改成测试时的样式。<br>于是模拟器中的样式就改为如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/20200103131249668.png#pic_center" alt="在这里插入图片描述"></p><p>图4.49 按钮样式</p><p>下面修改标题文本样式，将WeUI的标题文本样式移植到我的程序中。</p><p><img src="https://img-blog.csdnimg.cn/20200103131301971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.50 标题样式</p><p>下面我想将这三个上传图片的按钮进行水平均匀排布，找到按钮样式相关的样式文件，修改后的样式如下图所示。</p><p><img src="https://img-blog.csdnimg.cn/20200103131308343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.51 按钮样式修改</p><p>之后，我又修改了上传按钮和文字输出按钮的样式，添加了提示图片和提示信息。最终的样式如下图所示。</p><p><img src="https://img-blog.csdnimg.cn/20200103131327912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>图4.52 最终样式</p><h2 id="5-关键问题"><a href="#5-关键问题" class="headerlink" title="5 关键问题"></a>5 关键问题</h2><p>针对完成大作业过程中遇到的问题，分析描述在此过程中的关键问题，如重点难点等。<br>本次大作业“微信小程序的图片识别”程序实现过程中，重点问题是“图片上传”、“图片转码”、“API调用”以及“界面设计”。其中图片上传主要使用了微信小程序中的wx.chooseImage方法；图片转码使用wx.getFileSystemMangaer方法解决；API调用使用wx.request方法实现；界面设计使用了微信小程序的官方UI框架实现。</p><h2 id="6-使用说明"><a href="#6-使用说明" class="headerlink" title="6 使用说明"></a>6 使用说明</h2><p>提供微信小程序体验版的访问方式(小程序码)。</p><p><img src="https://img-blog.csdnimg.cn/20200103135137907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=600x180" alt="在这里插入图片描述"></p><p>图6.1 小程序码</p><p>下面给出完成的微信小程序的使用说明。使用体验版微信小程序，在自己的手机上进行测试。下面将测试过程及截图展示如下。</p><blockquote><p>（1）上传图片</p></blockquote><p>用户进入小程序后，首先需要通过相册或拍照，上传需要识别的图片。</p><p><img src="https://img-blog.csdnimg.cn/20200103131552626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=330x650" alt="在这里插入图片描述"></p><p>图6.2 上传图片</p><p>以“动物识别”为例，点击“上传动物图片”按钮，进行图片上传。</p><blockquote><p>（2）选择图片</p></blockquote><p>以从相册上传图片为例，点击从相册上传图片按钮，在相册中选择想要识别的图片。</p><p><img src="https://img-blog.csdnimg.cn/20200103131642305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=330x650" alt="在这里插入图片描述"></p><p>图6.3 选择图片</p><p><img src="https://img-blog.csdnimg.cn/20200103131710134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=330x650" alt="在这里插入图片描述"></p><p>图6.4 相册选择</p><blockquote><p>（3）识别图片</p></blockquote><p>上传图片完成后，点击小程序界面的“识别该图片”按钮，进行图片识别。经过短时间的等待，即可显示识别结果。</p><blockquote><p>（4）识别结果</p></blockquote><p>界面下方可以展示图片识别的结果。</p><p><img src="https://img-blog.csdnimg.cn/20200103131737554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=330x650" alt="在这里插入图片描述"></p><p>图6.5 上传成功</p><p><img src="https://img-blog.csdnimg.cn/20200103131818418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=330x650" alt="在这里插入图片描述"></p><p>图6.6 识别结果</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我的微信小程序 期末大作业——&lt;strong&gt;基于百度大脑API的图片识别小程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;具体实现了&lt;strong&gt;动物识别&lt;/strong&gt;、&lt;strong&gt;植物识别&lt;/strong&gt;、&lt;strong&gt;车辆识别&lt;/strong&gt; 三个功能&lt;br&gt;实验源码已经放到了&lt;a href=&quot;https://github.com/ZHJ0125/ImageMaster&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的GitHub&lt;/a&gt;，欢迎测试修改 (&lt;a href=&quot;https://github.com/ZHJ0125/ImageMaster&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目地址：https://github.com/ZHJ0125/ImageMaster&lt;/a&gt;)&lt;br&gt;下面给大家分享该项目的实验报告😜&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="微信小程序" scheme="https://zhj0125.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="图片识别" scheme="https://zhj0125.github.io/tags/%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/"/>
    
      <category term="API" scheme="https://zhj0125.github.io/tags/API/"/>
    
      <category term="实训报告" scheme="https://zhj0125.github.io/tags/%E5%AE%9E%E8%AE%AD%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04 编译安装 OpenCV 遇到的问题</title>
    <link href="https://zhj0125.github.io/2019/10/19/Ubuntu18-04-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-OpenCV-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://zhj0125.github.io/2019/10/19/Ubuntu18-04-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-OpenCV-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2019-10-19T10:43:19.000Z</published>
    <updated>2020-01-17T15:56:03.909Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录 Ubuntu18.04 编译安装 OpenCV 过程中遇到的问题</p><p>参考的安装教程：<a href="https://www.pyimagesearch.com/2018/05/28/ubuntu-18-04-how-to-install-opencv/" target="_blank" rel="noopener">Ubuntu 18.04: How to install OpenCV by Adrian Rosebrock on May 28, 2018 in OpenCV, Tutorials</a></p></blockquote><a id="more"></a><h2 id="报错1：-fatal-error-boostdesc-bgm-i-No-such-file-or-directory"><a href="#报错1：-fatal-error-boostdesc-bgm-i-No-such-file-or-directory" class="headerlink" title="报错1： fatal error: boostdesc_bgm.i: No such file or directory"></a>报错1： fatal error: boostdesc_bgm.i: No such file or directory</h2><p>报错截图：<br><img src="https://img-blog.csdnimg.cn/20191029181732561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>报错原因：在编译CMake的时候 <strong>boostdesc_bgm.i</strong> 这个文件就没有下载成功，导致make编译的时候找不到该文件。<br>解决方案：手动下载相关文件。总共需要下载11个文件，我已经将它们上传到了服务器上，<a href="http://47.95.13.239/play/OpenCV/fatal_error/" target="_blank" rel="noopener">点击此处可以下载</a>。下载完成后，将他们复制到 <strong>opencv_contrib/modules/xfeatures2d/src/</strong> 文件夹中，重新编译即可。</p><h2 id="报错2：fatal-error-opencv2-xfeatures2d-cuda-hpp-No-such-file-or-directory"><a href="#报错2：fatal-error-opencv2-xfeatures2d-cuda-hpp-No-such-file-or-directory" class="headerlink" title="报错2：fatal error: opencv2/xfeatures2d/cuda.hpp: No such file or directory"></a>报错2：fatal error: opencv2/xfeatures2d/cuda.hpp: No such file or directory</h2><p>报错截图：<br><img src="https://img-blog.csdnimg.cn/20191029181854240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>错误原因：CMake 默认不支持 https，导致文件下载失败<br>解决方案：在工程目录下查询cuda.hpp文件，将其复制到指定位置。使用find语句进行查询</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ -name "cuda.hpp"</span><br></pre></td></tr></table></figure><p>类似的，对于以下报错，都可以通过查找文件解决。<br><img src="https://img-blog.csdnimg.cn/20191029182255278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对于上图的报错，可以通过查找 <strong>nonfree.hpp</strong> ，并将其复制到 <strong>opencv2/xfeatures2d/</strong> 文件夹中即可解决。</p><p>最终安装成功<br><img src="https://img-blog.csdnimg.cn/20191029183719470.png" alt="在这里插入图片描述"></p><p>图.编译完成</p><p><img src="https://img-blog.csdnimg.cn/20191029183734823.png" alt="在这里插入图片描述"></p><p>图.cv模块导入</p><h2 id="其他参考资料"><a href="#其他参考资料" class="headerlink" title="其他参考资料"></a>其他参考资料</h2><ol><li><p><a href="https://zhuanlan.zhihu.com/p/38738976" target="_blank" rel="noopener">Install Opencv3.4.1 on Ubuntu 16.04 喝Caffe第一包</a></p></li><li><p><a href="https://www.twblogs.net/a/5c3353a4bd9eee35b3a52002/zh-cn" target="_blank" rel="noopener">编译OpenCV以及openc_contrib提示缺少boostdesc_bgm.i文件出错的解决</a></p></li><li><p><a href="https://github.com/opencv/opencv_contrib/issues/1301" target="_blank" rel="noopener">fatal error: boostdesc_bgm.i: No such file or directory #1301</a></p></li><li><p><a href="https://www.cnblogs.com/thmx/p/8565530.html" target="_blank" rel="noopener">安装opencv3.4.0报错</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录 Ubuntu18.04 编译安装 OpenCV 过程中遇到的问题&lt;/p&gt;
&lt;p&gt;参考的安装教程：&lt;a href=&quot;https://www.pyimagesearch.com/2018/05/28/ubuntu-18-04-how-to-install-opencv/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ubuntu 18.04: How to install OpenCV by Adrian Rosebrock on May 28, 2018 in OpenCV, Tutorials&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="OpenCV" scheme="https://zhj0125.github.io/tags/OpenCV/"/>
    
      <category term="Ubuntu18.04" scheme="https://zhj0125.github.io/tags/Ubuntu18-04/"/>
    
      <category term="日常Debug" scheme="https://zhj0125.github.io/tags/%E6%97%A5%E5%B8%B8Debug/"/>
    
  </entry>
  
  <entry>
    <title>STC11F04E——HC-SR04</title>
    <link href="https://zhj0125.github.io/2019/10/16/STC11F04E%E2%80%94%E2%80%94HC-SR04/"/>
    <id>https://zhj0125.github.io/2019/10/16/STC11F04E%E2%80%94%E2%80%94HC-SR04/</id>
    <published>2019-10-16T12:56:36.000Z</published>
    <updated>2020-01-17T17:19:06.396Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前几天做了一下电子工艺实习，实现了在数码管上显示温度和时间的功能，<a href="https://blog.csdn.net/ZHJ123CSDN/article/details/102299484" target="_blank" rel="noopener">还写了篇博客</a>。但当时没有注意到，这款PCB还设计了超声波测距的功能。在实现该功能后，我决定不再增改原来的文章，而写下这篇文章描述HC-SR04的控制方法。</p><ol><li>我是一个单片机小白，下面有任何说的不对的地方，恳请各位指正，谢谢。</li><li>我还做了一个使用数码管滚动显示学号的程序，就不再写成博客了，代码放在了GitHub</li></ol><p>我已将该项目上传到GitHub，项目地址为： <a href="https://github.com/ZHJ0125/STC11F04E" target="_blank" rel="noopener">STC11F04E项目</a>。 代码开源，欢迎测试</p></blockquote><a id="more"></a><p>&emsp;&emsp;单片机实验平台简介等信息，请阅读<a href="https://blog.csdn.net/ZHJ123CSDN/article/details/102299484" target="_blank" rel="noopener">上一篇文章</a>。</p><h2 id="一、HC-SR04"><a href="#一、HC-SR04" class="headerlink" title="一、HC-SR04"></a>一、HC-SR04</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>&emsp;&emsp;HC-SR04超声波测距模块提供2cm~4m的非接触式测距功能，测距精度可达3mm。</p><h3 id="1-2-电气参数"><a href="#1-2-电气参数" class="headerlink" title="1.2 电气参数"></a>1.2 电气参数</h3><table><thead><tr><th>电气参数</th><th>HC-SR04模块</th></tr></thead><tbody><tr><td>工作电压</td><td>DC 5V</td></tr><tr><td>工作电流</td><td>15mA</td></tr><tr><td>工作频率</td><td>40Hz</td></tr><tr><td>最远射程</td><td>4m</td></tr><tr><td>最近射程</td><td>2cm</td></tr><tr><td>测量角度</td><td>15°</td></tr><tr><td>输入触发信号</td><td>10us的TTL高电平脉冲</td></tr><tr><td>输出回响信号</td><td>输出TTL高电平，时间与射程成正比</td></tr><tr><td>规格尺寸</td><td>45×20×15mm</td></tr></tbody></table><h3 id="1-3-时序图"><a href="#1-3-时序图" class="headerlink" title="1.3 时序图"></a>1.3 时序图</h3><p><img src="https://img-blog.csdnimg.cn/20191010212059345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=500x250" alt="在这里插入图片描述"></p><p>图1 HC-SR04时序图</p><p>通过阅读时序图可以看出HCSR04的工作原理：</p><blockquote><ol><li>采用IO口TRIG触发测距，给至少10us的高电平信号</li><li>模块自动发送8个40khz的方波，自动检测是否有信号返回</li><li>有信号返回，通过IO口ECHO输出一个高电平，高电平持续的时间就是超声波从发射到返回的时间</li><li>测试距离 = (高电平时间 * 声速(340M/S)) / 2</li></ol></blockquote><p>&emsp;&emsp;通过阅读时序图和工作原理，可以了解到：当单片机给TRIG端口一个 &gt;10us 的高电平信号之后，就触发了HC-SR04传感器。此时，HCSR04会自动发出8个4KHz的方波信号，同时自动检测是否有方波信号返回。如果传感器接收到了信号回复，就会通过ECHO输出一个高电平的回响信号，而这个回响信号持续的时间就是超声波从发出到返回所用的时间。得到这个回响时间(t)之后，将其乘以超声波声速(v)，就是超声波从发出到接收所含经过的路程(s)。这个路程除以2，就是传感器到被测物体之间的距离。</p><p>&emsp;&emsp;虽然时序看起来比较简单，但其实控制它的重点，是对单片机定时器/计时器的控制。为什么呢？因为回响信号输出时间的计算需要用到定时器。因为第一次使用计时器，我大致了解了一下单片机定时器/计时器的使用方式。</p><ul><li>1个机器周期 = 12个晶振周期。即 $\text{T}_M =\dfrac{12}{\text{f}_\text{osc}}$</li></ul><blockquote><p>$\text{T}_M$ 表示机器周期<br>$\text{f}_\text{osc}$表示系统晶振的频率</p></blockquote><ul><li>定时时间 = 计数值 x 机器周期。$\text{T}_C=X×\text{T}_M$</li></ul><blockquote><p>$\text{T}_C$  表示定时时间<br>$X$  表示计数器计的个数</p></blockquote><p>在STC官方手册里指出：</p><blockquote><p>&emsp;&emsp;STC11/10xx系列单片有2个定时器，定时器0和定时器1，与传统8051的定时器完全兼容，也可以设置为1T模式，当在定时器1做波特率发生器时，定时器0可以当两个8位定时器用。<br>&emsp;&emsp;STC11/10xx系列单片机是1T的单片机，为兼容传统8051，定时器0和定时器1复位后是传统12T的速度，即12分频，这是为了兼容传统 。但也可不进行12分频，通过设置新增的特殊功能寄存器AUXR ,可以将T0,T1设置为1T。普通111条机器指令是固定的，快3到24倍，无法改变。</p></blockquote><p>&emsp;&emsp;也就是说，我这款单片机在上电之后，就默认初始化成了12分频的模式(可以通过AUXR调整分频模式)，即 $\text{T}_M =\dfrac{12}{\text{f}_\text{osc}}$。通过该公式即可算出晶振一次所消耗的时间。为了保证计数范围，需要设置TMOD计时方式控制寄存器，使用定时器0计时方式1，也就是用两个8位的组成一个16位的计时器。现在知道了这些知识，就可以着手编写程序了。</p><h2 id="二、程序编写"><a href="#二、程序编写" class="headerlink" title="二、程序编写"></a>二、程序编写</h2><p>&emsp;&emsp;下面同样只列出主要的测距程序，项目工程文件已上传至GitHub，<a href="https://github.com/ZHJ0125/STC11F04E" target="_blank" rel="noopener">STC11F04E项目</a>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************</span></span><br><span class="line"><span class="comment">*  函数名称：超声波测距函数</span></span><br><span class="line"><span class="comment">*  修改日期：2019-10-9</span></span><br><span class="line"><span class="comment">*  修改人：ZhangHJ</span></span><br><span class="line"><span class="comment">*  说明：1. 采用IO口TRIG触发测距，给至少10us的高电平信号</span></span><br><span class="line"><span class="comment">*        2. 模块自动发送8个40khz的方波，自动检测是否有信号返回</span></span><br><span class="line"><span class="comment">*        3. 若有信号返回，通过IO口ECHO输出一个高电平，高电平持续的时间就是超声波从发射到返回的时间</span></span><br><span class="line"><span class="comment">*        4. 测试距离 = (高电平时间*声速(340M/S))/2</span></span><br><span class="line"><span class="comment">***********************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">GetDistance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> dist = <span class="number">0.0f</span>;</span><br><span class="line">    uint count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    TMOD = <span class="number">0x01</span>;                        <span class="comment">// 计时器0方式1 (16位计数器,TL0、TH0全用)</span></span><br><span class="line">    TH0 = TL0 = <span class="number">0</span>;                      <span class="comment">// 装入初值</span></span><br><span class="line">    Trig = <span class="number">1</span>;                           <span class="comment">// 打开触发</span></span><br><span class="line">    delay_12us();                       <span class="comment">// 延时一会儿,保证延时10us时间</span></span><br><span class="line">    Trig = <span class="number">0</span>;                           <span class="comment">// 关闭触发</span></span><br><span class="line">    <span class="keyword">while</span>(!Echo);                       <span class="comment">// 测距过程中</span></span><br><span class="line">    TR0 = <span class="number">1</span>;                            <span class="comment">// 打开中断</span></span><br><span class="line">    <span class="keyword">while</span>(Echo);                        <span class="comment">// 等待输出电平结束</span></span><br><span class="line">    TR0 = <span class="number">0</span>;                            <span class="comment">// 关闭中断</span></span><br><span class="line">    count = (TH0 &lt;&lt; <span class="number">8</span>) | TL0;           <span class="comment">// 读取16位计时器里的数字</span></span><br><span class="line">    dist = CYCLE * count * <span class="number">0.017</span>;       <span class="comment">// 0.017cm/us</span></span><br><span class="line">    <span class="keyword">return</span> dist;                        <span class="comment">// 返回值是一个浮点型数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先设置TMOD定时计数器工作模式寄存器，将其设置成计时器0，工作方式1，表示使用的是两个8位的寄存器计数，高八位是TH0，低八位是TL0。将其装入初值为0。</li><li>接着设置Trig触发输入端为高电平，延时12us确保触发成功，然后将其重置为0。此时，传感器已经开始工作。</li><li>等待回响输入端置为低电平，保证记录一次完整的回响信号时间。</li><li>设置TR0为1，打开中断计时器，开始计数。</li><li>当回响信号为高电平时，一直计数，直到回响信号重新回到低电平，关闭计时器。</li><li>现在两个8位的计时器已经记录好数值了，通过移位操作，将高八位和低八位组成16位变量count。</li><li>通过上面分析的公式，可以算出传感器到被测物体之间的距离。</li><li>最后返回一个表示距离的浮点数据。</li></ol><p>&emsp;&emsp;其中需要注意的是，计算距离的公式中，需要用到每次计数器计数的时间，也就是上面分析过的一个机器周期。在程序起始位置进行机器周期的宏定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOSC 11059200L                  <span class="comment">// 晶振频率11.0592MHz(s)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CYCLE (12000000.0/FOSC)         <span class="comment">// 系统机器周期(us)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>FOSC   ： 表示系统晶振频率，我的单片机使用的是11.0592MHz的晶振，所以定义为11059200L<br>CYCLE ：表示机器周期，按照之前的公式， 12/FOSC  即为系统周期(单位为秒)，再乘以$\text{10}^6$，就是以us为单位的机器周期。</p></blockquote><p>&emsp;&emsp;通过数码管显示函数，格式化控制该函数返回的浮点数值，即可实现测距的结果显示。</p><h2 id="三、程序测试"><a href="#三、程序测试" class="headerlink" title="三、程序测试"></a>三、程序测试</h2><p>&emsp;&emsp;因为超声波模块需要一个比较稳定的测试环境，所以我做了一个超声波模块测距装置。利用游标卡尺得到正确的距离数值(实际值)，与单片机数码管显示的数值(测试值)进行比较，可以得出超声波测距装置是否准确。</p><p><img src="https://img-blog.csdnimg.cn/20191016201730216.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=1000x700" alt="在这里插入图片描述"></p><p>图2 超声波测距装置</p><p>上图中，可以看出游标卡尺的数值大概是15cm左右，单片机显示的数值也在15.0附近（单位：cm）。现在使用示波器，测量一下Echo回响信号的高电平时间，如下图3所示。</p><p><img src="https://img-blog.csdnimg.cn/20191016203435654.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>图3 示波器测量回响信号时间</p><p> &emsp;&emsp;可以看到。高电平时间 $\Delta x$ 为872.0us，这样按照公式算一下距离：</p><blockquote><p>距离 = 回响信号时间(us) * 0.034(cm/us) ÷ 2<br>&emsp;&emsp; = 872(us) * 0.017(cm/us)<br>&emsp;&emsp; = 14.824(cm)</p></blockquote><p>&emsp;&emsp;手动计算的数值与单片机上的数值接近，但并不是完全相等，原因是：这一次上升沿的时间也许并不是我们此次单片机显示的时间对应的高电平。。有点绕嘴。因为示波器上的这一段高电平，是我在好几个周期的高电平中，随便挑的一个高电平，与单片机显示的数值就近就是正常的了。应该说清楚了吧?</p><p><a href="http://47.95.13.239/Study/Microcomputer/STC11F04E/Video/Show_video/07_HC-SR04.MP4" target="_blank" rel="noopener">点击此处</a>查看演示视频</p><h2 id="四、改进"><a href="#四、改进" class="headerlink" title="四、改进"></a>四、改进</h2><p>&emsp;&emsp;超声波测距还有很多改进的空间，比如，为了保持测试数据的稳定，可以通过求平均值的方式进行改进。另外中断计时器应该还可以进行改进。。。<br>&emsp;&emsp;先写到这里吧，以后如果再有好的想法再来记录。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前几天做了一下电子工艺实习，实现了在数码管上显示温度和时间的功能，&lt;a href=&quot;https://blog.csdn.net/ZHJ123CSDN/article/details/102299484&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;还写了篇博客&lt;/a&gt;。但当时没有注意到，这款PCB还设计了超声波测距的功能。在实现该功能后，我决定不再增改原来的文章，而写下这篇文章描述HC-SR04的控制方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我是一个单片机小白，下面有任何说的不对的地方，恳请各位指正，谢谢。&lt;/li&gt;
&lt;li&gt;我还做了一个使用数码管滚动显示学号的程序，就不再写成博客了，代码放在了GitHub&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我已将该项目上传到GitHub，项目地址为： &lt;a href=&quot;https://github.com/ZHJ0125/STC11F04E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;STC11F04E项目&lt;/a&gt;。 代码开源，欢迎测试&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="STC11F04E" scheme="https://zhj0125.github.io/tags/STC11F04E/"/>
    
      <category term="电子工艺实训" scheme="https://zhj0125.github.io/tags/%E7%94%B5%E5%AD%90%E5%B7%A5%E8%89%BA%E5%AE%9E%E8%AE%AD/"/>
    
      <category term="单片机外设" scheme="https://zhj0125.github.io/tags/%E5%8D%95%E7%89%87%E6%9C%BA%E5%A4%96%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>STC11F04E——电子工艺实习</title>
    <link href="https://zhj0125.github.io/2019/10/07/STC11F04E%E2%80%94%E2%80%94%E7%94%B5%E5%AD%90%E5%B7%A5%E8%89%BA%E5%AE%9E%E4%B9%A0/"/>
    <id>https://zhj0125.github.io/2019/10/07/STC11F04E%E2%80%94%E2%80%94%E7%94%B5%E5%AD%90%E5%B7%A5%E8%89%BA%E5%AE%9E%E4%B9%A0/</id>
    <published>2019-10-07T05:49:13.000Z</published>
    <updated>2020-01-17T17:19:13.771Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这几天做了一下电子工艺实习，焊接了PCB然后烧写了相应的程序，现在将实验过程记录下来。</p><p>声明1：我是一个单片机小白，下面有任何说的不对的地方，恳请各位指正，谢谢。<br>声明2：我将控制位选的4个三极管更换了，<del>程序由原来的位选高电平选中，换成了位选低电平选中</del>，在此声明。<br>声明3：这款PCB还实现了超声波测距、数码管滚动显示学号等功能，请见<a href="https://blog.csdn.net/ZHJ123CSDN/article/details/102490823" target="_blank" rel="noopener">另一篇博客</a>，代码详见GitHub</p><p>我已将该项目上传到GitHub，项目地址为： <a href="https://github.com/ZHJ0125/STC11F04E" target="_blank" rel="noopener">STC11F04E项目</a>。 代码开源，欢迎测试</p></blockquote><a id="more"></a><h2 id="一、实验平台介绍"><a href="#一、实验平台介绍" class="headerlink" title="一、实验平台介绍"></a>一、实验平台介绍</h2><p>&emsp;&emsp;本次实验使用的PCB是老师自己画的，老师给了一张并不清晰的原理图截图，如下图所示。可以看到，这块PCB能实现三个功能：使用DS1302显示时间、使用DS18B20显示温度以及使用HC-SR04进行超声波测距(原理图上没有画，实际上它是与DS1302复用了IO和2SLCK引脚)，数值显示都是用数码管。实验用到的主控芯片是：STC11F04E</p><p><img src="https://img-blog.csdnimg.cn/20191007123216239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=1000x600" alt="在这里插入图片描述"></p><p>图1 原理图</p><p>&emsp;&emsp;焊接完成后大概长这样：</p><p><img src="https://img-blog.csdnimg.cn/20191007123405264.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=300x250" alt="在这里插入图片描述"></p><p>图2 正面</p><p><img src="https://img-blog.csdnimg.cn/20191007123423448.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=300x250" alt="在这里插入图片描述"></p><p>图3 背面</p><h2 id="二、功能实现"><a href="#二、功能实现" class="headerlink" title="二、功能实现"></a>二、功能实现</h2><h3 id="2-1-数码管驱动"><a href="#2-1-数码管驱动" class="headerlink" title="2.1 数码管驱动"></a>2.1 数码管驱动</h3><h4 id="2-1-1-原理"><a href="#2-1-1-原理" class="headerlink" title="2.1.1 原理"></a>2.1.1 原理</h4><p>&emsp;&emsp;点亮单个数码管只需要给数码管的公共端接高电平(低电平)，然后再给需要点亮的那一段接低电平(高电平)就可以了，其中“给需要点亮的那一段接低电平(高电平)”的过程称为“段选”。点亮多个数码管时，不仅需要选择点亮哪一段，还需要告诉单片机你选中的是哪个数码管，称为“位选”。数码管静态显示就是通过“位选”选中，然后“段选”点亮某些数码管。动态显示就是位选和段选切换的快一些，快到我们的眼睛察觉不到动态变化，就可以显示任意数字组合了。</p><h4 id="2-1-2-共阴还是共阳"><a href="#2-1-2-共阴还是共阳" class="headerlink" title="2.1.2 共阴还是共阳"></a>2.1.2 共阴还是共阳</h4><p>&emsp;&emsp;点亮每个数码管之前，都需要知道你的数码管是共阴的还是共阳的，这样才能点亮。测试的方法就是给公共端一个高电位，其他端口给个低点位，如果有一段被点亮了，说明这个数码管是共阳的，否则就是共阴的数码管。</p><p><img src="https://img-blog.csdnimg.cn/20191007123440576.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=600x600" alt="在这里插入图片描述"></p><p>图4 数码管测试</p><p>&emsp;&emsp;上面是利用Arduino的3.3V和GND接口，测试数码管的过程，可以看到本次实验使用的5611BH数码管是共阳的数码管。</p><h4 id="2-1-3-编写驱动程序"><a href="#2-1-3-编写驱动程序" class="headerlink" title="2.1.3 编写驱动程序"></a>2.1.3 编写驱动程序</h4><p>&emsp;&emsp;先看一下这部分的原理图</p><p><img src="https://img-blog.csdnimg.cn/20191007123456798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=1000x600" alt="在这里插入图片描述"></p><p>图5 数码管部分原理图</p><p>&emsp;&emsp;可以看到原理图中控制位选的是P1.0~P1.3这四个IO口，控制数码管段选的是74HC164这个芯片。</p><p>-（1）位选部分</p><p>&emsp;&emsp;刚才已经测量过，实验使用的数码管是一个共阳的数码管，所以位选选中的话就需要给每一个公共端高电平。公共端连结了一个三极管，三极管的基极连结P1口，射级连结了VCC，集电极连结数码管的公共端。因此，想要选中某一个数码管，只需使位选P1口输出高电平即可。</p><p>-（2）段选部分</p><p>&emsp;&emsp;段选控制部分用到了一个74HC164芯片，这个芯片的特点就是“串行输入、并行输出”，相当于一个8bit的移位寄存器。AB是数据输入端，它会在时钟的上升沿输入数据；CLK是时钟信号输入；MR是复位端，将它接高电平使能；Q0~Q7是数据并行输出端，会将8Bit的数据并行输出。使用这个74HC164芯片，可以减少单片机IO口的占用，仅使用两个IO口就可以控制一个数码管了。</p><p>-（3）程序编写</p><p>&emsp;&emsp;程序就不详细解释了，我在程序里写了很多注释，现在直接贴上主要部分的代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************</span></span><br><span class="line"><span class="comment">*  函数名称：74HC164发送Byte函数</span></span><br><span class="line"><span class="comment">*  日期：2019-9-29</span></span><br><span class="line"><span class="comment">*  姓名：ZhangHJ</span></span><br><span class="line"><span class="comment">*  说明：74HC164移位寄存器输入一字节数据发给寄存器</span></span><br><span class="line"><span class="comment">***********************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendByte_74HC164</span><span class="params">(uchar <span class="keyword">byte</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uchar num,c;</span><br><span class="line">    num=tab[<span class="keyword">byte</span>];</span><br><span class="line">    <span class="keyword">for</span>(c=<span class="number">0</span>; c&lt;<span class="number">8</span>; c++)</span><br><span class="line">    &#123;</span><br><span class="line">        DAT=num&amp;<span class="number">0x01</span>;           <span class="comment">// P3^0 --&gt; 0000 000x</span></span><br><span class="line">        CLK=<span class="number">0</span>;                  <span class="comment">// 制造一个上升沿</span></span><br><span class="line">        CLK=<span class="number">1</span>;</span><br><span class="line">        num&gt;&gt;=<span class="number">1</span>;                <span class="comment">// 将数据发送到寄存器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面贴出来的是74HC164发送数据的函数，也就是数码管段选的函数。位选控制的话，直接将P1口全部选中就可以了。<br>&emsp;&emsp;这部分做完后，现在板子可以实现4位数码管同时点亮的功能了，如下图所示。拍照可能数码管不太清楚，但实际看着效果可以。</p><p><img src="https://img-blog.csdnimg.cn/20191007125411710.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=500x400" alt="在这里插入图片描述"></p><p>图6 数码管静态显示效果</p><p>点击查看<a href="http://47.95.13.239/Study/Microcomputer/STC11F04E/Video/Show_video/01_Digital_Tube_Static_Display.MP4" target="_blank" rel="noopener">静态显示</a>的展示效果视频</p><h4 id="2-1-4-数码管动态显示"><a href="#2-1-4-数码管动态显示" class="headerlink" title="2.1.4 数码管动态显示"></a>2.1.4 数码管动态显示</h4><p>&emsp;&emsp;上面做完之后，就已经实现了数码管的静态显示，也就是4个数码管只能同时显示同一个数，要实现动态显示，就需要对数码管的位选进行详细的控制。<br>（1）动态原理<br>&emsp;&emsp;一般来说，动态显示的流程是：</p><blockquote><p>循环进行：</p><ol><li>关闭位选（位选都不选中）</li><li>开启段选（74HC164向寄存器传送数据）</li><li>开启位选（选中要显示的数码管）</li><li>关闭段选（清空段选数据，防止残影）</li><li>关闭位选（防止残影）</li></ol></blockquote><p>&emsp;&emsp;下面就根据这个顺序写一些数码管的动态显示程序。<br>（2）程序编写<br>&emsp;&emsp;同样只贴出重要的代码，工程文件我上传到了GitHub，会在文末给出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************</span></span><br><span class="line"><span class="comment">*  函数名称：按字节控制数码管动态显示函数</span></span><br><span class="line"><span class="comment">*  日期：2019-9-30</span></span><br><span class="line"><span class="comment">*  姓名：ZhangHJ</span></span><br><span class="line"><span class="comment">*  说明：实现4个数码管显示 1234 的效果</span></span><br><span class="line"><span class="comment">*       数码管引脚低电平有效,首先关闭位选信号,然后给寄存器发送数据(开启段选),</span></span><br><span class="line"><span class="comment">*       开启位选控制并延时一段时间以显示数字,最后关闭位选信号清屏.</span></span><br><span class="line"><span class="comment">***********************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_light_byte</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P1 |= <span class="number">0x0f</span>;                     <span class="comment">// 关掉位选</span></span><br><span class="line">    SendByte_74HC164(<span class="number">1</span>);            <span class="comment">// 开启段选</span></span><br><span class="line">    P1 &amp;= <span class="number">0xf7</span>;                     <span class="comment">// 开启位选</span></span><br><span class="line">    delay_ms(DELAY_TIME);           <span class="comment">// 延时显示</span></span><br><span class="line">    P1 |= <span class="number">0x0f</span>;                     <span class="comment">// 关掉位选</span></span><br><span class="line"></span><br><span class="line">    SendByte_74HC164(<span class="number">2</span>);</span><br><span class="line">    P1 &amp;= <span class="number">0xfB</span>;</span><br><span class="line">    delay_ms(DELAY_TIME);</span><br><span class="line">    P1 |= <span class="number">0x0f</span>;</span><br><span class="line"></span><br><span class="line">    SendByte_74HC164(<span class="number">3</span>);</span><br><span class="line">    P1 &amp;= <span class="number">0xfD</span>;</span><br><span class="line">    delay_ms(DELAY_TIME);</span><br><span class="line">    P1 |= <span class="number">0x0f</span>;</span><br><span class="line"></span><br><span class="line">    SendByte_74HC164(<span class="number">4</span>);</span><br><span class="line">    P1 &amp;= <span class="number">0xfe</span>;</span><br><span class="line">    delay_ms(DELAY_TIME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面的方法是同时控制1Byte的P1口的高低电平，实现位选控制，同样可以直接使用位控制，来控制数P1的某一个端口，下面给出代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************</span></span><br><span class="line"><span class="comment">*  函数名称：按位控制数码管动态显示函数</span></span><br><span class="line"><span class="comment">*  日期：2019-9-30</span></span><br><span class="line"><span class="comment">*  姓名：ZhangHJ</span></span><br><span class="line"><span class="comment">*  说明：实现4个数码管显示 4321 的效果</span></span><br><span class="line"><span class="comment">*       数码管引脚高电平有效,首先设置各位段选信号,然后给寄存器发送数据</span></span><br><span class="line"><span class="comment">*       延时一段时间实现数字显示,最后清除段选信号清屏.</span></span><br><span class="line"><span class="comment">***********************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_light_bit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DPY0 = ON;</span><br><span class="line">    DPY1 = OFF;</span><br><span class="line">    DPY2 = OFF;</span><br><span class="line">    DPY3 = OFF;</span><br><span class="line">    SendByte_74HC164(<span class="number">1</span>);</span><br><span class="line">    delay_ms(DELAY_TIME);</span><br><span class="line">    SendByte_74HC164(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    DPY0 = OFF;</span><br><span class="line">    DPY1 = ON;</span><br><span class="line">    DPY2 = OFF;</span><br><span class="line">    DPY3 = OFF;</span><br><span class="line">    SendByte_74HC164(<span class="number">2</span>);</span><br><span class="line">    delay_ms(DELAY_TIME);</span><br><span class="line">    SendByte_74HC164(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    DPY0 = OFF;</span><br><span class="line">    DPY1 = OFF;</span><br><span class="line">    DPY2 = ON;</span><br><span class="line">    DPY3 = OFF;</span><br><span class="line">    SendByte_74HC164(<span class="number">3</span>);</span><br><span class="line">    delay_ms(DELAY_TIME);</span><br><span class="line">    SendByte_74HC164(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    DPY0 = OFF;</span><br><span class="line">    DPY1 = OFF;</span><br><span class="line">    DPY2 = OFF;</span><br><span class="line">    DPY3 = ON;</span><br><span class="line">    SendByte_74HC164(<span class="number">4</span>);</span><br><span class="line">    delay_ms(DELAY_TIME);</span><br><span class="line">    SendByte_74HC164(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;差不多的流程，同样能实现数码管的动态显示控制。动态显示做完之后，这四个数码管就能显示不同的数字了，效果如下图所示。</p><p><img src="https://img-blog.csdnimg.cn/20191007125933886.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=500x400" alt="在这里插入图片描述"></p><p>图7 数码管动态显示效果</p><p>点击查看<a href="http://47.95.13.239/Study/Microcomputer/STC11F04E/Video/Show_video/02_Digital_Tube_Dynamic_Display.MP4" target="_blank" rel="noopener">数码管动态显示</a>的效果视频</p><p>&emsp;&emsp;可以看到，在按键按下后，显示的4321是有残影的。这是因为按位操作显示4321的函数，没有严格按照动态显示的顺序进行编写，没有关闭位选。就先这样吧，不再改了。<br>&emsp;&emsp;数码管能做到这里基本就算完事了，接下来进行DS18B20温度传感器的控制。</p><h3 id="2-2-DS18B20-温度传感器驱动"><a href="#2-2-DS18B20-温度传感器驱动" class="headerlink" title="2.2 DS18B20 温度传感器驱动"></a>2.2 DS18B20 温度传感器驱动</h3><h4 id="2-2-1-原理"><a href="#2-2-1-原理" class="headerlink" title="2.2.1 原理"></a>2.2.1 原理</h4><p>&emsp;&emsp;DS18B20是一个常见的温度传感器，特点就是“单总线数据传输”。因为它只有一个数据引脚，要实现单片机之间的数据读取、写入、初始化等操作，时序就非常重要了。非常非常非常重要（重要的事情说三遍）。其他内容看一下资料就好了，资料在我的GitHub里面也有。</p><h4 id="2-2-2-程序编写"><a href="#2-2-2-程序编写" class="headerlink" title="2.2.2 程序编写"></a>2.2.2 程序编写</h4><p>&emsp;&emsp;我们想实现的功能是将DS18B20的温度数值，显示在这4个数码管上。数码管已经玩过了，下面就列举一下DS18B20的驱动程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************</span></span><br><span class="line"><span class="comment">*  函数名称：发送复位和初始化命令函数 dsinit</span></span><br><span class="line"><span class="comment">*  修改日期：2019-9-9</span></span><br><span class="line"><span class="comment">*  修改人：ZhangHJ</span></span><br><span class="line"><span class="comment">*  说明：1. 对于单片机: 单片机首先发出480-960us的低电平脉冲,</span></span><br><span class="line"><span class="comment">*           释放总线为高电平(上拉电阻拉高),在随后的480us进行检测,</span></span><br><span class="line"><span class="comment">*           如果出现低电平，说明器件应答正常.B</span></span><br><span class="line"><span class="comment">*       2. 对于DS18B20: 上电后就检测是否有480/960us的低电平脉冲,</span></span><br><span class="line"><span class="comment">*           如果有低电平,在总线释放之后，等待15-60us,</span></span><br><span class="line"><span class="comment">*           将电平拉低60-240us,告诉主机已经准备好.</span></span><br><span class="line"><span class="comment">***********************************************************/</span></span><br><span class="line"><span class="function">uchar <span class="title">dsreset</span><span class="params">(<span class="keyword">void</span>)</span>             <span class="comment">// send reset and initialization command</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uint i;</span><br><span class="line">    DS = <span class="number">0</span>;                     <span class="comment">// 先将端口拉低</span></span><br><span class="line">    i=<span class="number">120</span>;                      <span class="comment">// 维持低电平状态480us~960us</span></span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>)i--;</span><br><span class="line">    DS = <span class="number">1</span>;                     <span class="comment">// 然后释放总线(将总线拉高),若DS18B20做出反应,将会将在15us~60us后将总线拉低</span></span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(DS)                   <span class="comment">// 在DS高电平时等待</span></span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">50000</span>)           <span class="comment">// 等待时间大于60us,说明响应失败</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面这个程序是DS18B20的初始化函数，也就是说，DS18B20在于单片机进行通信之前，需要跟单片机告诉一声，单片机于DS18B20之间建立通信连接之后，才能进行整行的通信。这也是单总线通信的特点。<br>&emsp;&emsp;大概的通信过程是：</p><blockquote><ol><li>对于单片机: 单片机首先发出480-960us的低电平脉冲,释放总线为高电平(上拉电阻拉高),在随后的480us进行检测,如果出现低电平，说明器件应答正常。</li><li>对于DS18B20: 上电后就检测是否有480/960us的低电平脉冲,如果有低电平,在总线释放之后，等待15-60us,将电平拉低60-240us,告诉主机已经准备好。</li></ol></blockquote><p>&emsp;&emsp;单片机与DS18B20之间建立通信连接（DS18B20初始化）完成后，单片机想读取DS18B20的寄存器中的数据，还需要写一个读取数据的函数，下面贴出代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************</span></span><br><span class="line"><span class="comment">*  函数名称：读1bit数据函数</span></span><br><span class="line"><span class="comment">*  修改日期：2019-9-9</span></span><br><span class="line"><span class="comment">*  修改人：ZhangHJ</span></span><br><span class="line"><span class="comment">*  说明：1.首先单片机端口拉低 &gt;1us,</span></span><br><span class="line"><span class="comment">*       2.然后释放总线,拉高总线,</span></span><br><span class="line"><span class="comment">*       3.等待&gt;15微秒，是为了让 DS18B20 数据稳定,</span></span><br><span class="line"><span class="comment">*       4.读取DS数据,</span></span><br><span class="line"><span class="comment">*       5.接下来进行延时等待采样周期完成。</span></span><br><span class="line"><span class="comment">*   详见DS18B20资料2.8.3.1读/写时间片</span></span><br><span class="line"><span class="comment">***********************************************************/</span></span><br><span class="line"><span class="function"><span class="built_in">bit</span> <span class="title">tmpreadbit</span><span class="params">(<span class="keyword">void</span>)</span>            <span class="comment">// read a bit data</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uint i;</span><br><span class="line">    <span class="built_in">bit</span> dat;                    <span class="comment">// 定义位数据 (dat = 0 or 1)</span></span><br><span class="line">    DS = <span class="number">0</span>;                     <span class="comment">// 先将端口拉低</span></span><br><span class="line">    _nop_();                    <span class="comment">// 延时 2us ,要求至少保持1us</span></span><br><span class="line">    DS = <span class="number">1</span>;                     <span class="comment">// 再将端口拉高</span></span><br><span class="line">    i=<span class="number">8</span>;<span class="keyword">while</span>(i&gt;<span class="number">0</span>)i--;          <span class="comment">// 等待DS数据稳定,要求的至少延时15us以上</span></span><br><span class="line">    dat = DS;                   <span class="comment">// 数据传输</span></span><br><span class="line">    i=<span class="number">15</span>;<span class="keyword">while</span>(i&gt;<span class="number">0</span>)i--;         <span class="comment">// 等待数据采样周期完成,要求不低于60us</span></span><br><span class="line">    <span class="keyword">return</span> (dat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面这个函数，是单片机读取DS18B20一位数据的函数。这个函数的时序要求很严格，这些操作的时间一定要按要求，否则程序将不能正常运行。函数具体的过程也不说了，注释里都有。现在这个函数是读取1bit数据的函数，要想实现1Byte的读取，只需将这个函数循环8次，加上数据移位操作就可以了，代码就不贴了。<br>&emsp;&emsp;上面已经算是单片机可以读取到DS18B20的数据了，但是DS18B20它是怎样得到温度数值的呢？这涉及到了对DS18B20 的寄存器写指令的操作，举个例子，单片机往DS18B20里面写入一字节的指令0x44，18B20就会进行进行一次温度转换。这些操作指令在DS18B20的手册里面都有，我们也不用记住，到时候直接手册就行。所以现在需要写一个写操作的函数，用来给DS18B20写指令，下面贴出代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************</span></span><br><span class="line"><span class="comment">*  函数名称：写入1Byte数据函数</span></span><br><span class="line"><span class="comment">*  修改日期：2019-9-11</span></span><br><span class="line"><span class="comment">*  修改人：ZhangHJ</span></span><br><span class="line"><span class="comment">*  说明：1.将对待写入数据dat进行位操作,将dat末位数值赋值给位数据testb</span></span><br><span class="line"><span class="comment">*       2.通过判断testb得到写 0 还是写 1</span></span><br><span class="line"><span class="comment">*       3.若是写 0 操作,将 DS 拉低,进行&gt;60us的延时,再将DS拉高,进行&gt;1us的延时</span></span><br><span class="line"><span class="comment">*       4.若是写 1 操作,将 DS 拉低,进行15~60us的延时,再将DS拉高,进行&gt;60us的延时</span></span><br><span class="line"><span class="comment">*       5.循环执行2、3、4操作8次,写入1字节数据</span></span><br><span class="line"><span class="comment">*   详见18B20资料“2.8.3.1读/写时间片”章节</span></span><br><span class="line"><span class="comment">***********************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tmpwritebyte</span><span class="params">(uchar dat)</span>        <span class="comment">//write a byte to ds18b20</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uint i;</span><br><span class="line">  uchar j;</span><br><span class="line">  <span class="built_in">bit</span> testb;</span><br><span class="line">  <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">8</span>;j++)</span><br><span class="line">  &#123;</span><br><span class="line">    testb = dat&amp;<span class="number">0x01</span>;</span><br><span class="line">    dat = dat&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(testb)                       <span class="comment">// write 1</span></span><br><span class="line">    &#123;</span><br><span class="line">      DS=<span class="number">0</span>;</span><br><span class="line">      i=<span class="number">8</span>;<span class="keyword">while</span>(i&gt;<span class="number">0</span>)i--;            <span class="comment">// 延时要求15~60us内</span></span><br><span class="line">      DS=<span class="number">1</span>;</span><br><span class="line">      i=<span class="number">15</span>;<span class="keyword">while</span>(i&gt;<span class="number">0</span>)i--;           <span class="comment">// 要求不低于60us</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      DS = <span class="number">0</span>;                       <span class="comment">// write 0</span></span><br><span class="line">      i=<span class="number">15</span>;<span class="keyword">while</span>(i&gt;<span class="number">0</span>)i--;</span><br><span class="line">      DS = <span class="number">1</span>;</span><br><span class="line">      i++;i++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;写操作同样对时序也是非常非常严格，按手册要求才行。具体的过程同样也没啥可说的，注释里也有。这样就可以对DS18B20写入操作命令，指示DS18B20干活了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************</span></span><br><span class="line"><span class="comment">*  函数名称：18B20温度转换完整过程函数</span></span><br><span class="line"><span class="comment">*  修改日期：2019-9-11</span></span><br><span class="line"><span class="comment">*  修改人：ZhangHJ</span></span><br><span class="line"><span class="comment">*  说明：1.首先进行18B20初始化</span></span><br><span class="line"><span class="comment">*       2.进行适当延时</span></span><br><span class="line"><span class="comment">*       3.发送跳过光刻ROM指令</span></span><br><span class="line"><span class="comment">*       4.发送RAM指令,进行温度转换</span></span><br><span class="line"><span class="comment">*       5.读取两个8位数据,放到16位寄存器 temp 中</span></span><br><span class="line"><span class="comment">*       6.将读取到的二进制数据(默认为正数),转换为十进制数据</span></span><br><span class="line"><span class="comment">*       7.返回温度数据</span></span><br><span class="line"><span class="comment">*   详见18B20资料“2.8.3.1存储器操作命令”章节</span></span><br><span class="line"><span class="comment">***********************************************************/</span></span><br><span class="line"><span class="function">uint <span class="title">tmp</span><span class="params">()</span>                          <span class="comment">// get the temperature</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> tt;</span><br><span class="line">    uchar high,low;</span><br><span class="line">    <span class="comment">//P1 |= 0x0f;</span></span><br><span class="line">    <span class="keyword">while</span>(dsreset() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        SendByte_74HC164(<span class="number">0</span>);</span><br><span class="line">        P1 &amp;= <span class="number">0xfB</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//tmpchange();</span></span><br><span class="line">    tmpwritebyte(<span class="number">0xCC</span>);             <span class="comment">// 跳过 ROM 操作</span></span><br><span class="line">    tmpwritebyte(<span class="number">0xBE</span>);             <span class="comment">// 读暂存寄存器</span></span><br><span class="line">    low=tmpread();</span><br><span class="line">    high=tmpread();</span><br><span class="line">    temp=high;</span><br><span class="line">    temp&lt;&lt;=<span class="number">8</span>;                       <span class="comment">// two byte compose a int variable</span></span><br><span class="line">    temp=temp|low;</span><br><span class="line">    tt=temp*<span class="number">0.0625</span>;</span><br><span class="line">    temp=tt*<span class="number">10</span>+<span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面的函数就是DS18B20温度转换的完整过程，因为涉及到了一些寄存器的操作，温度数值转换的操作，我也没深入研究，也不说啥了。想要知道原理的话可以看一看DS18B20的手册。<br>&emsp;&emsp;现在已经能够实现读取DS18B20温度数值的功能了，只要将温度转换之后的数值，显示到数码管上就完事了。数码管那一部分就不贴代码了，跟动态显示差不太多。效果如下图所示。</p><p><img src="https://img-blog.csdnimg.cn/20191007130258503.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=500x400" alt="在这里插入图片描述"></p><p>图8 温度显示效果</p><p>点击查看<a href="http://47.95.13.239/Study/Microcomputer/STC11F04E/Video/Show_video/03_DS18B20_Test.MP4" target="_blank" rel="noopener">DS18B20温度传感器</a>测试视频</p><h3 id="2-3-DS1302时钟模块"><a href="#2-3-DS1302时钟模块" class="headerlink" title="2.3 DS1302时钟模块"></a>2.3 DS1302时钟模块</h3><h4 id="2-3-1-原理"><a href="#2-3-1-原理" class="headerlink" title="2.3.1 原理"></a>2.3.1 原理</h4><p>&emsp;&emsp;DS1302是一个常见的时钟芯片，它可以可提供秒、分、时、日、星期、月和年的时间记录，同时还有每月多少天的自动调整，还具有闰年补偿功能。<del>嗯，功能多到我们都用不着哈?。这东西拿来做一个万年历还行，但是我的PCB上面只有4个数码管，一次也显示不全，还不如只用“时分”功能来得方便。</del><br>&emsp;&emsp;DS1302的封装就长这样：</p><p><img src="https://img-blog.csdnimg.cn/2019100712364634.png#pic_center=300x150" alt="在这里插入图片描述"></p><p>图9 DS1302时钟芯片</p><blockquote><p>Vcc2是它的主电源，Vcc1是它的备用电源<br>X1、X2是晶振的输入端<br>SCLK是时钟的输入端<br>CE是片选使能</p></blockquote><p>&emsp;&emsp;==在芯片手册里有要求==，外接的晶振是标准的32.768KHz，按要求外接一个就行了。SCLK接单片机的引脚，因为这个芯片在读写操作时需要进行时钟的控制（在时钟上升沿写入数据；在时钟下降沿读数据），所以接到单片机上给它造上升沿和下降沿。CE是片选使能，在时序图里面可以看到，要进行读写操作时，CE必须要是高电平。低电平的CE会禁止读写操作，终止数据的传输。</p><p><img src="https://img-blog.csdnimg.cn/20191007123655290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=600x450" alt="在这里插入图片描述"></p><p>图10 DS1302时序图</p><h4 id="2-3-2-程序编写"><a href="#2-3-2-程序编写" class="headerlink" title="2.3.2 程序编写"></a>2.3.2 程序编写</h4><p>&emsp;&emsp;DS1302这个芯片操作还是比较方便的，这个芯片因为是专门用来当时钟的芯片，所以对他的访问也无非就只有“写入初始时间”和“读取时间”。<br>&emsp;&emsp;对于写入初始时间来说，也就是往DS1302寄存器里写入数据而已；对于读取时间来说，需要你提供一个地址，用来告诉单片机你想访问DS1302的哪个寄存器，然后单片机就会去DS1302这个寄存器里面取值，经过数值转换后，就成了我们想要的时间数值。<br>&emsp;&emsp;DS1302的寄存器也有点意思，因为它是专门的时钟芯片，所以寄存器也是很好理解。</p><p><img src="https://img-blog.csdnimg.cn/20191007123710882.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=600x320" alt="在这里插入图片描述"></p><p>图11 DS1302寄存器</p><p>&emsp;&emsp;首先来进行写命令函数的编写，下面贴出代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************</span></span><br><span class="line"><span class="comment">*  函数名称：DS1302写操作函数</span></span><br><span class="line"><span class="comment">*  日期：2019-10-4</span></span><br><span class="line"><span class="comment">*  姓名：ZhangHJ</span></span><br><span class="line"><span class="comment">*  说明：写操作包含两个参数,add表示要写入的地址;wdata表示要写入的数据</span></span><br><span class="line"><span class="comment">*       1. 读写操作需要先将RST拉高才能进行</span></span><br><span class="line"><span class="comment">*       2. 先写入控制字节,在时钟上升沿串行写入数据</span></span><br><span class="line"><span class="comment">*       3. 再写入数据字节,同样在时钟上升沿写入数据</span></span><br><span class="line"><span class="comment">*       4. 最后拉低RST禁止数据传输</span></span><br><span class="line"><span class="comment">***********************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DS1302Write</span><span class="params">(uchar add,uchar wdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uchar a;</span><br><span class="line">    <span class="comment">//wdata = hex(wdata);       // 转换为BCD码</span></span><br><span class="line">    RST=<span class="number">0</span>;                      <span class="comment">// 拉低RST引脚,终止数据传输</span></span><br><span class="line">    SCLK=<span class="number">0</span>;                     <span class="comment">// 拉低SCLK引脚,清零时钟线</span></span><br><span class="line">    RST=<span class="number">1</span>;                      <span class="comment">// 拉高RST引脚,所有数据传输都要拉高RST脚,启动控制逻辑</span></span><br><span class="line">    <span class="comment">//先写入控制字节</span></span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>; a&lt;<span class="number">8</span>; a++)</span><br><span class="line">    &#123;</span><br><span class="line">        IO= add &amp; <span class="number">0x01</span>;         <span class="comment">// IO引脚准备好要写入的1位数据</span></span><br><span class="line">        SCLK=<span class="number">1</span>;                 <span class="comment">// SCLK上升沿,1位数据从IO脚写入,低位先写入</span></span><br><span class="line">        add&gt;&gt;=<span class="number">1</span>;                <span class="comment">// 数据右移1位</span></span><br><span class="line">        SCLK=<span class="number">0</span>;                 <span class="comment">// 拉低SCLK,为下次写入准备,循环8次写入1字节</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//再写入数据字节</span></span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>; a&lt;<span class="number">8</span>; a++)</span><br><span class="line">    &#123;</span><br><span class="line">        IO= wdata &amp; <span class="number">0x01</span>;</span><br><span class="line">        SCLK=<span class="number">1</span>;</span><br><span class="line">        wdata&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        SCLK=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    RST=<span class="number">0</span>;                      <span class="comment">// 数据传输完拉低RST</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;写入数据也是串行写入的，可以依照时序图进行该函数的编写。另外读命令函数也贴出代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************</span></span><br><span class="line"><span class="comment">*  函数名称：DS1302读操作函数</span></span><br><span class="line"><span class="comment">*  日期：2019-10-4</span></span><br><span class="line"><span class="comment">*  姓名：ZhangHJ</span></span><br><span class="line"><span class="comment">*  说明：读操作只需一个参数,即需要读取的寄存器地址add</span></span><br><span class="line"><span class="comment">*       1. 首先需要将需要读取的地址(1Byte)写入寄存器,在上升沿进行写入操作</span></span><br><span class="line"><span class="comment">*       2. 之后读取该地址中的数据,在下降沿读取数据</span></span><br><span class="line"><span class="comment">*       3. 最后返回读取到的1Byte数据</span></span><br><span class="line"><span class="comment">***********************************************************/</span></span><br><span class="line"><span class="function">uchar <span class="title">DS1302Read</span><span class="params">(uchar add)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uchar a, rdata=<span class="number">0</span>;</span><br><span class="line">    RST = <span class="number">0</span>;                    <span class="comment">// 拉低RST引脚,终止数据传输</span></span><br><span class="line">    SCLK = <span class="number">0</span>;                   <span class="comment">// 拉低SCLK引脚,清零时钟线</span></span><br><span class="line">    RST = <span class="number">1</span>;                    <span class="comment">// 拉高RST引脚,启动控制逻辑</span></span><br><span class="line">    <span class="comment">//发送控制字节</span></span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>; a&lt;<span class="number">8</span>; a++)</span><br><span class="line">    &#123;</span><br><span class="line">        SCLK = <span class="number">0</span>;</span><br><span class="line">        IO = add &amp; <span class="number">0x01</span>;</span><br><span class="line">        SCLK = <span class="number">1</span>;               <span class="comment">// 制造一个上升沿,写入地址</span></span><br><span class="line">        add &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读1字节数据</span></span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>; a&lt;<span class="number">8</span>; a++)</span><br><span class="line">    &#123;</span><br><span class="line">        SCLK = <span class="number">1</span>;</span><br><span class="line">        rdata &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        SCLK = <span class="number">0</span>;               <span class="comment">// 制造一个下降沿,读取数据</span></span><br><span class="line">        <span class="keyword">if</span>(IO)</span><br><span class="line">        &#123;                       <span class="comment">// 如果读到1</span></span><br><span class="line">            rdata |= <span class="number">0x80</span>;      <span class="comment">// 把最高位置为1,记录到rdata中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    RST=<span class="number">0</span>;                      <span class="comment">// 拉低RST</span></span><br><span class="line">    <span class="comment">//return dec(d);            // 读取的数据转换成十进制</span></span><br><span class="line">    <span class="keyword">return</span> rdata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;读命令也是依照时序图就可以编写出来，方便理解。<br>&emsp;&emsp;现在读写指令都编写完成了，基本上DS1302的功能就可以实现了。其他的数码管显示、初始时间设置等等，就不再说了，直接看GitHub。效果如下图所示。</p><p><img src="https://img-blog.csdnimg.cn/20191007130532344.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=500x400" alt="在这里插入图片描述"></p><p>图12 时间显示效果</p><p>点击查看<a href="http://47.95.13.239/Study/Microcomputer/STC11F04E/Video/Show_video/04_DS1302.MP4" target="_blank" rel="noopener">DS1302时钟芯片</a>测试视频</p><h3 id="2-4-代码整合"><a href="#2-4-代码整合" class="headerlink" title="2.4 代码整合"></a>2.4 代码整合</h3><p>&emsp;&emsp;现在已经实现了数码管显示、DS1302获取时间、DS18B20获取温度这三个功能了，只要将代码整合一下就能烧到单片机中了。具体的整合过程也不再赘述了，只贴一下最终的主函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主函数功能：默认显示时间(初始化时间为“2019年10月4日18:55:00”),按住INT0按键时,会显示温度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uchar a;</span><br><span class="line">    ds1302_init();                          <span class="comment">// DS1302日期初始化</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 时间显示</span></span><br><span class="line">        read_time();                        <span class="comment">// DS1302读取当前时间</span></span><br><span class="line">        Display_Time();                     <span class="comment">// 显示当前时间</span></span><br><span class="line">        <span class="comment">// 按键处理</span></span><br><span class="line">        <span class="keyword">if</span> (KEY == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">delay</span>(<span class="number">5</span>);</span><br><span class="line">            <span class="keyword">while</span>(KEY == <span class="number">0</span>)                 <span class="comment">// 按键消抖</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 温度显示</span></span><br><span class="line">                tmpchange();                <span class="comment">// 首次温度转换</span></span><br><span class="line">                <span class="keyword">for</span>(a=<span class="number">50</span>;a&gt;<span class="number">0</span>;a--)           <span class="comment">// 延时,保持连续显示</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Display_Tmp(tmp());     <span class="comment">// 进行温度转换和数值显示</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;主函数实现的功能就是，在单片机上电后，进行一次时钟芯片的初始化，设置初始时间，然后循环进行时间的显示。当INT0按键被按下时，会进行温度转换，显示实时温度。</p><p>点击查看<a href="http://47.95.13.239/Study/Microcomputer/STC11F04E/Video/Show_video/05_FinalCode.mp4" target="_blank" rel="noopener">代码整合</a>视频</p><h2 id="三、设想"><a href="#三、设想" class="headerlink" title="三、设想"></a>三、设想</h2><p>&emsp;&emsp;现在单片机能实现两个功能：温度显示、时间显示 。但是时间的显示是通过DS1302时钟芯片来实现的，这就有一些缺点。比如我可能需要在初始化时钟芯片时写入初始化的时间，这就显得不太合适；同时，由于单片机晶振和外部晶振的问题，可能导致时间不准确，过一段时间还得手动校时，这也很不方便。<br>&emsp;&emsp;比较好的解决办法是将单片机联网，在网络获取时间后写入DS1302，每隔一段时间进行一次自动校时，这样就解决了时间不准确的问题。然而单片机自身不能联网，需要通过其他方式接入网络。ESP8266就是一款小巧的WiFi模块，通过单片机与ESP8266的通信，可以将网络时间传输到单片机中。<br>&emsp;&emsp;ESP8266可以通过AT指令的方式，与单片机进行数据通信；同时，它自身的WiFi功能还能通过网络GET请求获取到NTP服务器的精确时间，通过串口传给单片机进行校时。<br>&emsp;&emsp;目前我已实现使用ESP8266获取到网络时间的功能，我是用TTL连接的电脑，用串口助手给ESP8266发送AT指令，通过GET请求获取到了NTP服务器的时间，如下图9所示。<br>&emsp;&emsp;在GET请求到的数据中，可以看到date1就是我们想要的时间，而且还是UTC +8.00的东八区时间，用起来会更方便了。<br>&emsp;&emsp;我现在是使用串口与ESP8266通信，需要实现的单片机与ESP8266的通信，与这种方式差不多，所以实现起来还是可行的。</p><p><img src="https://img-blog.csdnimg.cn/20191007123747515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pISjEyM0NTRE4=,size_16,color_FFFFFF,t_70#pic_center=600x450" alt="在这里插入图片描述"></p><p>图13 串口助手</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>&emsp;&emsp;以前玩过Arduino、树莓派，现在看来Arduino，它的IDE是很方便，适合初学者；而树莓派因为能搭载Linux所以功能太强大，跟电脑差不多了。还是单片机好玩，因为在学习单片机的过程中，才能真正理解每一个器件是如何工作的，学习工程中需要了解很多底层的知识才能玩转。<br>&emsp;&emsp;单片机一开始上手都不知道怎么烧程序，后来查阅资料之后才慢慢了解。另外就是DS18B20 时序很重要。。。因为我花了很长时间才把它玩起来，让人头大。</p><h2 id="五、资料"><a href="#五、资料" class="headerlink" title="五、资料"></a>五、资料</h2><h2 id="5-1-本项目GitHub地址"><a href="#5-1-本项目GitHub地址" class="headerlink" title="5.1 本项目GitHub地址"></a>5.1 本项目GitHub地址</h2><p><a href="https://github.com/ZHJ0125/STC11F04E" target="_blank" rel="noopener">https://github.com/ZHJ0125/STC11F04E</a></p><h3 id="5-2-参考资料"><a href="#5-2-参考资料" class="headerlink" title="5.2 参考资料"></a>5.2 参考资料</h3><h4 id="5-2-1-74HC164"><a href="#5-2-1-74HC164" class="headerlink" title="5.2.1 74HC164"></a>5.2.1 74HC164</h4><p><a href="https://www.wlxmall.com/items/74HC164-cn-1-id-84741.html" target="_blank" rel="noopener">74hc164中文资料汇总（74hc164引脚图及功能_特性参数及典型应用电路） - 全文 - 电子发烧友网</a><br><a href="http://www.51hei.com/mcu/2655.html" target="_blank" rel="noopener">74HC164_中文资料_价格_官方数据手册_STMICROELECTRONICS - 万联芯城</a><br><a href="https://www.iteye.com/blog/yunchow-355124" target="_blank" rel="noopener">51单片机74HC164串口控制数码管显示</a><br><a href="http://www.baiheee.com/Documents/100816/100816204211.htm" target="_blank" rel="noopener">74HC164控制数码管显示 - 恶魔的旋律 - ITeye博客</a><br><a href="https://lcsc.com/product-detail/STC_STC11F04E_C26845.html" target="_blank" rel="noopener">74HC164驱动程序实例（C语言版子程序或汇编版子程序）-百合电子工作室</a><br><a href="https://blog.csdn.net/ztm521/article/details/4417455" target="_blank" rel="noopener">STC Micro STC11F04E - PDF Datasheet - STC In Stock | lcsc.com</a><br><a href="https://www.wlxmall.com/items/at89c2051-24su-cn-2-id-28092.html" target="_blank" rel="noopener">74HC164 - ztm521的专栏 - CSDN博客</a></p><h4 id="5-2-2-AT89C2051"><a href="#5-2-2-AT89C2051" class="headerlink" title="5.2.2 AT89C2051"></a>5.2.2 AT89C2051</h4><p><a href="http://www.waveshare.net/shop/AT89C2051-24PC.html" target="_blank" rel="noopener">AT89C2051-24SU_引脚图_电路图(2/10)_ATMEL - 万联芯城</a><br><a href="">AT89C2051-24PC 89C2051-24PC 价格</a></p><h4 id="5-2-3-DS18B20"><a href="#5-2-3-DS18B20" class="headerlink" title="5.2.3 DS18B20"></a>5.2.3 DS18B20</h4><p><a href="https://www.cnblogs.com/fengmk2/archive/2007/03/11/670955.html" target="_blank" rel="noopener">单片机练习 - DS18B20温度转换与显示 - MK2 - 博客园</a><br><a href="https://wiki.jikexueyuan.com/project/mcu-tutorial-three/temperature-sensor.html" target="_blank" rel="noopener">16.4 温度传感器 DS18B20 - 单片机教程(三) - 极客学院Wiki</a><br><a href="https://blog.csdn.net/Kk_01110001B/article/details/80720030" target="_blank" rel="noopener">关于DS18B20温度传感器的时序详解及代码分析 - Kk_01110001B的博客 - CSDN博客</a><br><a href="https://blog.csdn.net/feike24/article/details/52357772" target="_blank" rel="noopener">51单片机的几种精确延时 - feike24的博客 - CSDN博客</a></p><h4 id="5-2-4-DS1302"><a href="#5-2-4-DS1302" class="headerlink" title="5.2.4 DS1302"></a>5.2.4 DS1302</h4><p><a href="https://www.iteye.com/blog/hzy3774-1751531" target="_blank" rel="noopener">51单片机操作DS1302时钟芯片 - 柚柚控 - ITeye博客</a><br><a href="https://blog.csdn.net/u013151320/article/details/50221091" target="_blank" rel="noopener">51单片机DS1302实时时钟驱动程序 - Line - CSDN博客</a></p><h4 id="5-2-5-ESP8266"><a href="#5-2-5-ESP8266" class="headerlink" title="5.2.5 ESP8266"></a>5.2.5 ESP8266</h4><p><a href="https://blog.csdn.net/qq_31310793/article/details/77162408" target="_blank" rel="noopener">ESP8266-01 固件更新过程 - qq_31310793的博客 - CSDN博客</a><br><a href="https://www.espressif.com/zh-hans/support/download/other-tools" target="_blank" rel="noopener">工具 | 乐鑫</a><br><a href="https://wiki.aprbrother.com/en/Firmware_For_ESP8266.html" target="_blank" rel="noopener">v1.1.1 · GitBook</a><br><a href="https://lastminuteengineers.com/esp8266-ntp-server-date-time-tutorial/" target="_blank" rel="noopener">使用ESP8266 NodeMCU从NTP服务器获取日期和时间</a><br><a href="https://www.nutsvolts.com/magazine/article/June2016_ESP8266-NTP-Clock" target="_blank" rel="noopener">ESP8266 NTP时钟| 坚果与伏特杂志</a><br><a href="https://www.nutsvolts.com/magazine/article/October2015_Lindley" target="_blank" rel="noopener">认识ESP8266 | 坚果与伏特杂志</a><br><a href="https://www.instructables.com/id/Simplest-ESP8266-Local-Time-Internet-Clock-With-OL/" target="_blank" rel="noopener">带OLED的最简单ESP8266本地时间互联网时钟：4个步骤（带图片）</a><br><a href="https://blog.csdn.net/weixin_42757674/article/details/83009904" target="_blank" rel="noopener">51单片机利用8266获取网络时间 - weixin_42757674的博客 - CSDN博客</a><br><a href="http://www.stcmcu.com/index.htm" target="_blank" rel="noopener">STC: 1T 8051 单片机创新者, ISP/IAP 技术创新者</a><br><a href="https://www.zhihu.com/question/19998995" target="_blank" rel="noopener">三极管是如何导通的？ - 知乎</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这几天做了一下电子工艺实习，焊接了PCB然后烧写了相应的程序，现在将实验过程记录下来。&lt;/p&gt;
&lt;p&gt;声明1：我是一个单片机小白，下面有任何说的不对的地方，恳请各位指正，谢谢。&lt;br&gt;声明2：我将控制位选的4个三极管更换了，&lt;del&gt;程序由原来的位选高电平选中，换成了位选低电平选中&lt;/del&gt;，在此声明。&lt;br&gt;声明3：这款PCB还实现了超声波测距、数码管滚动显示学号等功能，请见&lt;a href=&quot;https://blog.csdn.net/ZHJ123CSDN/article/details/102490823&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;另一篇博客&lt;/a&gt;，代码详见GitHub&lt;/p&gt;
&lt;p&gt;我已将该项目上传到GitHub，项目地址为： &lt;a href=&quot;https://github.com/ZHJ0125/STC11F04E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;STC11F04E项目&lt;/a&gt;。 代码开源，欢迎测试&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="STC11F04E" scheme="https://zhj0125.github.io/tags/STC11F04E/"/>
    
      <category term="电子工艺实训" scheme="https://zhj0125.github.io/tags/%E7%94%B5%E5%AD%90%E5%B7%A5%E8%89%BA%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
</feed>
